# Generated by Django 5.2 on 2025-05-07 15:12

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('ChatRoom', '0001_initial'),
        ('fields', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='chatroom',
            name='community',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_rooms', to='fields.community'),
        ),
        migrations.AddField(
            model_name='chatroom',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_chat_rooms', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='like',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='reply',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='reply',
            name='parent_reply',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='nested_replies', to='ChatRoom.reply'),
        ),
        migrations.AddField(
            model_name='like',
            name='reply',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stars', to='ChatRoom.reply'),
        ),
        migrations.AddField(
            model_name='thread',
            name='chat_room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='threads', to='ChatRoom.chatroom'),
        ),
        migrations.AddField(
            model_name='thread',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='reply',
            name='thread',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='ChatRoom.thread'),
        ),
        migrations.AddField(
            model_name='like',
            name='thread',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stars', to='ChatRoom.thread'),
        ),
        migrations.AddIndex(
            model_name='chatroom',
            index=models.Index(fields=['community', 'type'], name='ChatRoom_ch_communi_fefdda_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='chatroom',
            unique_together={('community', 'type')},
        ),
        migrations.AddIndex(
            model_name='thread',
            index=models.Index(fields=['chat_room', '-created_at'], name='ChatRoom_th_chat_ro_27deae_idx'),
        ),
        migrations.AddIndex(
            model_name='reply',
            index=models.Index(fields=['thread', 'created_at'], name='ChatRoom_re_thread__2d0274_idx'),
        ),
        migrations.AddIndex(
            model_name='like',
            index=models.Index(fields=['user', '-created_at'], name='ChatRoom_li_user_id_3836f3_idx'),
        ),
        migrations.AddConstraint(
            model_name='like',
            constraint=models.UniqueConstraint(condition=models.Q(('reply__isnull', True)), fields=('user', 'thread'), name='uniq_user_thread_like'),
        ),
        migrations.AddConstraint(
            model_name='like',
            constraint=models.UniqueConstraint(condition=models.Q(('thread__isnull', True)), fields=('user', 'reply'), name='uniq_user_reply_like'),
        ),
        migrations.AddConstraint(
            model_name='like',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('reply__isnull', True), ('thread__isnull', False)), models.Q(('reply__isnull', False), ('thread__isnull', True)), _connector='OR'), name='like_target_xor'),
        ),
    ]
